<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
    <!--<aop:aspectj-autoproxy />-->

    <!--
    分布式和集群的区别
    分布式：一个业务分拆多个子业务，部署在不同的服务器上
    集群：同一个业务，部署在多个服务器上（CNAS项目用的是集群）

    DataSourceTransactionManager：位于org.springframework.jdbc.datasource包中，数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC抽象框架、iBATIS框架的事务管理；
    JtaTransactionManager：位于org.springframework.transaction.jta包中，提供对分布式事务管理的支持，并将事务管理委托给Java EE应用服务器事务管理器；
    两个不依赖于应用服务器的开源JTA事务实现：JOTM和Atomikos Transactions Essentials
    JOTM：基于Java开放事务管理器（Java Open Transaction Manager），实现JTA规范，能够运行在非应用服务器环境中，Web容器或独立Java SE环境
    Atomikos Transactions Essentials：其为Atomikos开发的事务管理器，该产品属于开源产品，另外还一个商业的Extreme Transactions。
    -->


    <!-- 生成切面通知的bean -->
    <bean id="myInterceptor" class="com.mjx.interceptor.MyInterceptor"></bean>

    <aop:config>
        <!-- 设置切入点 -->
        <aop:pointcut  id="coreServicePointcut"  expression="execution(* com.mjx.service..*.*(..))" />
        <!-- 加入事物控制 -->
        <aop:advisor advice-ref="serviceTXAdvice" pointcut-ref="coreServicePointcut" order="1"/>
        <!-- 定义切面 引用通知的bean -->
        <aop:aspect ref="myInterceptor" order="2">
            <!--指定around通知方法为,doAround()，引用切入点myPointCut -->
            <aop:around method="doAround" pointcut-ref="coreServicePointcut" />
        </aop:aspect>
    </aop:config>


    <!-- 事物管理 -->
    <tx:advice id="serviceTXAdvice" transaction-manager="atomikosJtaTXManager">
        <tx:attributes>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="is*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <bean id="atomikosJtaTXManager" class="org.springframework.transaction.jta.JtaTransactionManager"
          lazy-init="true">
        <property name="transactionManager" ref="atomikosTransactionManager" />
        <property name="userTransaction" ref ="atomikosUserTransaction" />
        <property name="allowCustomIsolationLevels" value="true"/>
    </bean>

    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close">
        <property name="forceShutdown">
            <value>true</value>
        </property>
    </bean>
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout">
            <value>300</value>
        </property>
    </bean>

    <!--<bean id="setMyAtomikosSystemProps" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject">
            &lt;!&ndash; System.getProperties() &ndash;&gt;
            <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                <property name="targetClass" value="java.lang.System" />
                <property name="targetMethod" value="getProperties" />
            </bean>
        </property>
        <property name="targetMethod" value="putAll" />
        <property name="arguments">
            &lt;!&ndash; The new Properties &ndash;&gt;
            <props>
                <prop key="com.atomikos.icatch.file">classpath:config/jta.properties</prop>
                <prop key="com.atomikos.icatch.hide_init_file_path">true</prop>
            </props>
        </property>
    </bean>-->

    <!-- context通用 -->
    <bean id="contextUtil" class="com.mjx.util.ContextUtil" lazy-init="false"/>

</beans>